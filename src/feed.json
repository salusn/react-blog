{"status":"ok","feed":{"url":"https://lightrains.com/feed.xml","title":"Lightrains Technolabs","link":"https://lightrains.com/","author":"","description":"Blockchain Consulting.","image":""},"items":[{"title":"What is meant by forking in a Blockchain?","pubDate":"2017-06-16 04:40:00","link":"https://lightrains.com/blogs/what-is-meant-by-forking-blockchain","guid":"https://lightrains.com/blogs/what-is-meant-by-forking-blockchain","author":"","thumbnail":"","description":"You might heard of the term forking many times in the last few years, if you are in the Blockchain industry by any chance. Here we are attempting to provide a clear understanding of what is meant by forking. It is not a blockchain specific term; In software engineering, a project fork happens when developers take a copy of source code from one software package and start independent development on it, creating a distinct and separate piece of software. What is meant by forking in Blockchain - basics At its most basic, a fork is what happens when a blockchain diverges into two potential paths forward — either with regard to a network’s transaction history or a new rule in deciding what makes a transaction valid. But forks also can be willingly introduced to the network. This occurs when developers seek to change the rules the software uses to decide whether a transaction is valid or not. What is meant by forking in Blockchain - advanced Forking in each and every Blockchain is different, based on the design architecture and use case the chain. We shall look into a more generic scenario. Fork can happen in following situations Anytime two miners find a block at nearly the same time. Developers seek to change the rules the software uses to decide whether a transaction is valid or not. Types of Forks Soft fork: by contrast, is any change that’s backward compatible. Hard fork: is a software upgrade that introduces a new rule to the network that isn’t compatible with the older software User-activated soft fork (UASF): is a controversial idea that explores how a blockchain might add an upgrade that is not directly supported by those who provide the network’s hashing power. What happens when the blockchain forks? It’s actually quite...","content":"You might heard of the term forking many times in the last few years, if you are in the Blockchain industry by any chance. Here we are attempting to provide a clear understanding of what is meant by forking. It is not a blockchain specific term; In software engineering, a project fork happens when developers take a copy of source code from one software package and start independent development on it, creating a distinct and separate piece of software. What is meant by forking in Blockchain - basics At its most basic, a fork is what happens when a blockchain diverges into two potential paths forward — either with regard to a network’s transaction history or a new rule in deciding what makes a transaction valid. But forks also can be willingly introduced to the network. This occurs when developers seek to change the rules the software uses to decide whether a transaction is valid or not. What is meant by forking in Blockchain - advanced Forking in each and every Blockchain is different, based on the design architecture and use case the chain. We shall look into a more generic scenario. Fork can happen in following situations Anytime two miners find a block at nearly the same time. Developers seek to change the rules the software uses to decide whether a transaction is valid or not. Types of Forks Soft fork: by contrast, is any change that’s backward compatible. Hard fork: is a software upgrade that introduces a new rule to the network that isn’t compatible with the older software User-activated soft fork (UASF): is a controversial idea that explores how a blockchain might add an upgrade that is not directly supported by those who provide the network’s hashing power. What happens when the blockchain forks? It’s actually quite...","enclosure":[],"categories":["Blockchain","Bitcoin","Ethereum","Principles"]},{"title":"State management in React with Redux","pubDate":"2017-06-07 04:40:00","link":"https://lightrains.com/blogs/state-management-react-with-redux","guid":"https://lightrains.com/blogs/state-management-react-with-redux","author":"","thumbnail":"","description":"Facebook released a tool to create React Apps with no need for configurations. If you’re just beginning to learn React, you might want to use create-react-app and get started Immediately.\n\nnpm install -g create-react-app\ncreate-react-app react-redux-example\ncd react-redux-example/\nnpm start\n\n\n\nRedux is a state management tool for react. It’s the most popular tool used to manage state.\n\nnpm install --save redux\n\n\n\nThere is a official React bindings for Redux. We can use that for easy binding.\n\nnpm install --save react-redux\n\n\n\nSo we are ready to start with React and Redux\n\nHow to connect React to the Redux store?\n\nImport React,  ReactDOM, createStore from redux and Provider from react-redux\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\n\nCreate your store with reducer. We can use a simple basic reducer here…\n\nfunction reducer(state = [], action) {\n  switch (action.type) {\n    case 'ADD_ACTION':\n      return [\n    ...state,\n    action\n  ]\n    default:\n      return state\n  }\n}\nlet store = createStore(reducer)\n\n\n\nUse the provider to bind the store in all component\n\n ReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,document.getElementById('root')\n)\n\n\n\nNow the store is available in all component. We can import connect from react-redux to get the state in components.\n\nImport connect in your component first\n\nimport { connect } from 'react-redux'\n\n\n\nUse connect to connect the component with the store\n\nexport default connect()(YourComponentName)\n\n\n\nUse mapStateToProps and  mapDispatchToProps  to map the State and Dispatch to the props","content":"Facebook released a tool to create React Apps with no need for configurations. If you’re just beginning to learn React, you might want to use create-react-app and get started Immediately.\n\nnpm install -g create-react-app\ncreate-react-app react-redux-example\ncd react-redux-example/\nnpm start\n\n\n\nRedux is a state management tool for react. It’s the most popular tool used to manage state.\n\nnpm install --save redux\n\n\n\nThere is a official React bindings for Redux. We can use that for easy binding.\n\nnpm install --save react-redux\n\n\n\nSo we are ready to start with React and Redux\n\nHow to connect React to the Redux store?\n\nImport React,  ReactDOM, createStore from redux and Provider from react-redux\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport {createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\n\nCreate your store with reducer. We can use a simple basic reducer here…\n\nfunction reducer(state = [], action) {\n  switch (action.type) {\n    case 'ADD_ACTION':\n      return [\n    ...state,\n    action\n  ]\n    default:\n      return state\n  }\n}\nlet store = createStore(reducer)\n\n\n\nUse the provider to bind the store in all component\n\n ReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,document.getElementById('root')\n)\n\n\n\nNow the store is available in all component. We can import connect from react-redux to get the state in components.\n\nImport connect in your component first\n\nimport { connect } from 'react-redux'\n\n\n\nUse connect to connect the component with the store\n\nexport default connect()(YourComponentName)\n\n\n\nUse mapStateToProps and  mapDispatchToProps  to map the State and Dispatch to the props","enclosure":[],"categories":["React","Redux","State management"]},{"title":"Codewall","pubDate":"2017-03-29 23:40:00","link":"https://lightrains.com/blogs/codewall","guid":"https://lightrains.com/blogs/codewall","author":"","thumbnail":"","description":"","content":"","enclosure":[],"categories":["Downloads","Codewall"]},{"title":"How to set up private ethereum blockchain using ethcore/parity","pubDate":"2017-03-09 23:40:00","link":"https://lightrains.com/blogs/setup-parity-private-blockchains","guid":"https://lightrains.com/blogs/setup-parity-private-blockchains","author":"","thumbnail":"","description":"Hope you know what a private blockchain and why do we need one, if not; please take a look at Private Permissioned Blockchain. After youre done with the reading, lets proceed with setting up Parity. Parity: is an Ethereum client, written from the ground-up for correctness-verifiability, modularisation, low-footprint and high-performance. Step 1: Install Parity One-line Binary Installer: This method is way faster than building, though you won’t get the cutting edge features and it only works on Ubuntu and Mac with Homebrew installed. To use the script just run: bash &lt;(curl https://raw.githubusercontent.com/ethcore/scripts/master/install-deps.sh -L) This will install and configure the Parity client for you. Step 2: Development set up. From parity 1.5 and above, it offers a pre-configured development flag to help you get started with ease. Of course you can change the parameters as required. Parity provides an dev engine, which can be used for dapp development and demos. parity –chain dev Features of parity --chain dev Transactions will get sealed at most every 2 seconds The address created with an empty phrase contains a lot of tokens that can be used to send transactions Customizing the development chain The default configuration should work fine in most cases, however it can be customized. The following example spec can be passed to –chain option where accounts contains a custom account with lots of Ether. { \"name\": \"DevelopmentChain\", \"engine\": { \"instantSeal\": { \"params\": {} } }, \"params\": { \"accountStartNonce\": \"0x0\", \"maximumExtraDataSize\": \"0x20\", \"minGasLimit\": \"0x1388\", \"networkID\" : \"0x11\" }, \"genesis\": { \"seal\": { \"generic\": \"0x0\" }, \"difficulty\": \"0x20000\", \"author\": \"0x0000000000000000000000000000000000000000\", \"timestamp\": \"0x00\", \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"extraData\": \"0x\", \"gasLimit\": \"0x5B8D80\" }, \"accounts\": { \"0000000000000000000000000000000000000001\": { \"balance\": \"1\", \"builtin\": { \"name\": \"ecrecover\", \"pricing\": { \"linear\": { \"base\": 3000, \"word\": 0 } } } }, \"0000000000000000000000000000000000000002\": { \"balance\": \"1\", \"builtin\": { \"name\": \"sha256\", \"pricing\": { \"linear\": {...","content":"Hope you know what a private blockchain and why do we need one, if not; please take a look at Private Permissioned Blockchain. After youre done with the reading, lets proceed with setting up Parity. Parity: is an Ethereum client, written from the ground-up for correctness-verifiability, modularisation, low-footprint and high-performance. Step 1: Install Parity One-line Binary Installer: This method is way faster than building, though you won’t get the cutting edge features and it only works on Ubuntu and Mac with Homebrew installed. To use the script just run: bash &lt;(curl https://raw.githubusercontent.com/ethcore/scripts/master/install-deps.sh -L) This will install and configure the Parity client for you. Step 2: Development set up. From parity 1.5 and above, it offers a pre-configured development flag to help you get started with ease. Of course you can change the parameters as required. Parity provides an dev engine, which can be used for dapp development and demos. parity –chain dev Features of parity --chain dev Transactions will get sealed at most every 2 seconds The address created with an empty phrase contains a lot of tokens that can be used to send transactions Customizing the development chain The default configuration should work fine in most cases, however it can be customized. The following example spec can be passed to –chain option where accounts contains a custom account with lots of Ether. { \"name\": \"DevelopmentChain\", \"engine\": { \"instantSeal\": { \"params\": {} } }, \"params\": { \"accountStartNonce\": \"0x0\", \"maximumExtraDataSize\": \"0x20\", \"minGasLimit\": \"0x1388\", \"networkID\" : \"0x11\" }, \"genesis\": { \"seal\": { \"generic\": \"0x0\" }, \"difficulty\": \"0x20000\", \"author\": \"0x0000000000000000000000000000000000000000\", \"timestamp\": \"0x00\", \"parentHash\": \"0x0000000000000000000000000000000000000000000000000000000000000000\", \"extraData\": \"0x\", \"gasLimit\": \"0x5B8D80\" }, \"accounts\": { \"0000000000000000000000000000000000000001\": { \"balance\": \"1\", \"builtin\": { \"name\": \"ecrecover\", \"pricing\": { \"linear\": { \"base\": 3000, \"word\": 0 } } } }, \"0000000000000000000000000000000000000002\": { \"balance\": \"1\", \"builtin\": { \"name\": \"sha256\", \"pricing\": { \"linear\": {...","enclosure":[],"categories":["Parity","Private Blockchain","Permissioned Blockchain","Blockchain"]},{"title":"Fixing npm permissions","pubDate":"2017-02-09 23:40:00","link":"https://lightrains.com/blogs/fixing-npm-permissions-install-global","guid":"https://lightrains.com/blogs/fixing-npm-permissions-install-global","author":"","thumbnail":"","description":"This indicates that you do not have permission to write to the directories that npm uses to store global packages and commands.\n\nHow bad is it?\n\nnpm ERR! Linux 3.19.0-49-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"-g\" \"hapi\"\nnpm ERR! node v7.5.0\nnpm ERR! npm  v4.1.2\nnpm ERR! path /usr/lib/node_modules\nnpm ERR! code EACCES\nnpm ERR! errno -13\nnpm ERR! syscall access\n\nnpm ERR! Error: EACCES: permission denied, access '/usr/lib/node_modules'\nnpm ERR!  { Error: EACCES: permission denied, access '/usr/lib/node_modules'\nnpm ERR!   errno: -13,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   syscall: 'access',\nnpm ERR!   path: '/usr/lib/node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/light/npm-debug.log\n\n\n\nRead official documentation\n\nYou can fix this problem using one of three options:\n\n\n  Change the permission to npm’s default directory.\n  Change npm’s default directory to another directory.\n  Install node with a package manager that takes care of this for you.\n\n\nHow to Fix?\n\nPlease check this gist\n\n\n  Run cd ~\n  Run wget http://pastebin.com/raw/1ccE6EgF -O fix_npm.sh\n  Run chmod +x fix_npm.sh\n  Run ./fix_npm.sh\n\n\nOfficial npm Video","content":"This indicates that you do not have permission to write to the directories that npm uses to store global packages and commands.\n\nHow bad is it?\n\nnpm ERR! Linux 3.19.0-49-generic\nnpm ERR! argv \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\" \"-g\" \"hapi\"\nnpm ERR! node v7.5.0\nnpm ERR! npm  v4.1.2\nnpm ERR! path /usr/lib/node_modules\nnpm ERR! code EACCES\nnpm ERR! errno -13\nnpm ERR! syscall access\n\nnpm ERR! Error: EACCES: permission denied, access '/usr/lib/node_modules'\nnpm ERR!  { Error: EACCES: permission denied, access '/usr/lib/node_modules'\nnpm ERR!   errno: -13,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   syscall: 'access',\nnpm ERR!   path: '/usr/lib/node_modules' }\nnpm ERR!\nnpm ERR! Please try running this command again as root/Administrator.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/light/npm-debug.log\n\n\n\nRead official documentation\n\nYou can fix this problem using one of three options:\n\n\n  Change the permission to npm’s default directory.\n  Change npm’s default directory to another directory.\n  Install node with a package manager that takes care of this for you.\n\n\nHow to Fix?\n\nPlease check this gist\n\n\n  Run cd ~\n  Run wget http://pastebin.com/raw/1ccE6EgF -O fix_npm.sh\n  Run chmod +x fix_npm.sh\n  Run ./fix_npm.sh\n\n\nOfficial npm Video","enclosure":[],"categories":["NodeJS","npmjs","Development Tools","Tools","Open Source"]},{"title":"What is Bitcoin Segregated Witness aka segwit","pubDate":"2017-02-05 23:40:00","link":"https://lightrains.com/blogs/bitcoin-segregated-witness-segwit","guid":"https://lightrains.com/blogs/bitcoin-segregated-witness-segwit","author":"","thumbnail":"","description":"Segregated Witness is a solution for the Bitcoin Core. It is spearheaded by Pieter Wuille, Johnson Lau, and Eric Lombrozo BIP141. The general idea of segwit is that the signatures in a transaction (aka witness data) are skipped when calculating the transaction id. Segregated Witness is basically an “add-on” that carries signatures and some additional data. Importantly, Segregated Witnesses are completely ignored by old nodes, but recognized by new nodes. Moreover, the data they carry is not hashed along with the other parts of a transaction into the transaction ID. Rationale The transaction size overhead is due to two factors: using a 256 bit hash for P2WSH rather than the 160 bit hash for P2SH; and encoding via P2SH so that old wallets that don’t support segwit can send funds that can be spent using segwit, allowing the receiver to gain segwit’s benefits. Without these two factors, the overhead would be negligible at -3 bytes for P2WPKH and +1 bytes for P2WSH. Segregated Witness Benefits The Segregated Witness soft-fork (segwit) includes a wide range of features, many of which are highly technical. Malleability Fixes: The way the txid is calculated allows anyone to make small modifications to the transaction that will not change its meaning, but will change the txid. This is called third-party malleability. BIP 62 (“dealing with malleability”) attempted to address these issues in a piecemeal manner, but was too complicated to implement as consensus checks and has been withdrawn. Linear scaling of sighash operations: A major problem with simple approaches to increasing the Bitcoin blocksize is that for certain transactions, signature-hashing scales quadratically rather than linearly. Doubling the size of a transaction increases can double both the number of signature operations, and the amount of data that has to be hashed for each of those signatures to...","content":"Segregated Witness is a solution for the Bitcoin Core. It is spearheaded by Pieter Wuille, Johnson Lau, and Eric Lombrozo BIP141. The general idea of segwit is that the signatures in a transaction (aka witness data) are skipped when calculating the transaction id. Segregated Witness is basically an “add-on” that carries signatures and some additional data. Importantly, Segregated Witnesses are completely ignored by old nodes, but recognized by new nodes. Moreover, the data they carry is not hashed along with the other parts of a transaction into the transaction ID. Rationale The transaction size overhead is due to two factors: using a 256 bit hash for P2WSH rather than the 160 bit hash for P2SH; and encoding via P2SH so that old wallets that don’t support segwit can send funds that can be spent using segwit, allowing the receiver to gain segwit’s benefits. Without these two factors, the overhead would be negligible at -3 bytes for P2WPKH and +1 bytes for P2WSH. Segregated Witness Benefits The Segregated Witness soft-fork (segwit) includes a wide range of features, many of which are highly technical. Malleability Fixes: The way the txid is calculated allows anyone to make small modifications to the transaction that will not change its meaning, but will change the txid. This is called third-party malleability. BIP 62 (“dealing with malleability”) attempted to address these issues in a piecemeal manner, but was too complicated to implement as consensus checks and has been withdrawn. Linear scaling of sighash operations: A major problem with simple approaches to increasing the Bitcoin blocksize is that for certain transactions, signature-hashing scales quadratically rather than linearly. Doubling the size of a transaction increases can double both the number of signature operations, and the amount of data that has to be hashed for each of those signatures to...","enclosure":[],"categories":["Segregated Witness","Segwit","Bitcoin","UTXO","Principles","Blockchain"]},{"title":"Introduction to Tendermint","pubDate":"2017-01-28 23:40:00","link":"https://lightrains.com/blogs/intro-tendermint","guid":"https://lightrains.com/blogs/intro-tendermint","author":"","thumbnail":"","description":"What is Tendermint? Tendermint is software for securely and consistently replicating an application on many machines. To simply put Tendermint is a software which can be used to achieve Byzantine fault tolerance (BFT) in any distributed computing platforms. From managing infrastructure to designing a distributed database, we can use Tendermint. The ability to tolerate machines failing in arbitrary ways, including becoming malicious, is known as Byzantine fault tolerance (BFT). The theory of BFT is decades old, but software implementations have only became popular recently, due largely to the success of “blockchain technology” like Bitcoin and Ethereum. Blockchain technology is just a reformalization of BFT in a more modern setting, with emphasis on peer-to-peer networking and cryptographic authentication. The name derives from the way transactions are batched in blocks, where each block contains a cryptographic hash of the previous one, forming a chain. In practice, the blockchain data structure actually optimizes BFT design. doc Tendermint consists of two chief technical components: a blockchain consensus engine and a generic application interface. The consensus engine, called Tendermint Core, ensures that the same transactions are recorded on every machine in the same order. The application interface, called the Application BlockChain Interface (ABCI), enables the transactions to be processed in any programming language. How to write applications using Tendermint? As you can read from the official docs, Tendermint will not handle your keys, encryption or business logic, just the consensus and that’s it. ABCI Design The purpose of ABCI is to provide a clean interface between state transition machines on one computer and the mechanics of their replication across multiple computers. The former we call ‘application logic’ and the latter the ‘consensus engine’. Application logic validates transactions and optionally executes transactions against some persistent state. The ABCI design has a few distinct components: message protocol...","content":"What is Tendermint? Tendermint is software for securely and consistently replicating an application on many machines. To simply put Tendermint is a software which can be used to achieve Byzantine fault tolerance (BFT) in any distributed computing platforms. From managing infrastructure to designing a distributed database, we can use Tendermint. The ability to tolerate machines failing in arbitrary ways, including becoming malicious, is known as Byzantine fault tolerance (BFT). The theory of BFT is decades old, but software implementations have only became popular recently, due largely to the success of “blockchain technology” like Bitcoin and Ethereum. Blockchain technology is just a reformalization of BFT in a more modern setting, with emphasis on peer-to-peer networking and cryptographic authentication. The name derives from the way transactions are batched in blocks, where each block contains a cryptographic hash of the previous one, forming a chain. In practice, the blockchain data structure actually optimizes BFT design. doc Tendermint consists of two chief technical components: a blockchain consensus engine and a generic application interface. The consensus engine, called Tendermint Core, ensures that the same transactions are recorded on every machine in the same order. The application interface, called the Application BlockChain Interface (ABCI), enables the transactions to be processed in any programming language. How to write applications using Tendermint? As you can read from the official docs, Tendermint will not handle your keys, encryption or business logic, just the consensus and that’s it. ABCI Design The purpose of ABCI is to provide a clean interface between state transition machines on one computer and the mechanics of their replication across multiple computers. The former we call ‘application logic’ and the latter the ‘consensus engine’. Application logic validates transactions and optionally executes transactions against some persistent state. The ABCI design has a few distinct components: message protocol...","enclosure":[],"categories":["Byzantine Fault Tolerance","BFT","Blockchain Consensus","Tendermint"]},{"title":"Atlaschain","pubDate":"2017-01-20 19:31:01","link":"https://lightrains.com/work/atlaschain-gis-blockchain","guid":"https://lightrains.com/work/atlaschain-gis-blockchain","author":"","thumbnail":"","description":"Atlaschain is a Decentralised, Permissioned Blockchain based GIS and digital assets platform. Maps are a precious resource and location is a powerful way to visualise and understand data. However getting data on a map and distributing it in a decentralised manner has been a challenge. We want to make GIS data available to everyone in a decentralised and permissioned (if needed) manner using blockchains. In addition, we want to use the blockchain as a proof of record for the existence of the data. Usage Scenarios for Atlaschain Publishing Public GIS Data on the Atlas Chain: By publishing this data on the Atlas Chain any organisation can take advantage of the properties of the block chain to ensure that an authoritative version of the dataset is available in a decentralised, immutable repository. This would improve the confidence of the public on the transparency and integrity of the data. It would also make it possible for anyone with any type of client to get at the data from different nodes reducing the load on public websites. Exchanging Private Data between a department and its members: There are scenarios where entities like the police force or fire force may want to call up a map of an area with certain extra statistics or information that is not publicly available. In this scenario a series of contracts between a department (like the fire force) and its members would be created in which the GIS Data would be encrypted and exchanged. The department would be able to selectively revoke a contract and remove the data access when needed. Exchanging Private GIS Data: There are often situations where two or more private entities agree to share their geo data for mutual benefit. In this scenario the data would be encrypted and signed by the transacting parties...","content":"Atlaschain is a Decentralised, Permissioned Blockchain based GIS and digital assets platform. Maps are a precious resource and location is a powerful way to visualise and understand data. However getting data on a map and distributing it in a decentralised manner has been a challenge. We want to make GIS data available to everyone in a decentralised and permissioned (if needed) manner using blockchains. In addition, we want to use the blockchain as a proof of record for the existence of the data. Usage Scenarios for Atlaschain Publishing Public GIS Data on the Atlas Chain: By publishing this data on the Atlas Chain any organisation can take advantage of the properties of the block chain to ensure that an authoritative version of the dataset is available in a decentralised, immutable repository. This would improve the confidence of the public on the transparency and integrity of the data. It would also make it possible for anyone with any type of client to get at the data from different nodes reducing the load on public websites. Exchanging Private Data between a department and its members: There are scenarios where entities like the police force or fire force may want to call up a map of an area with certain extra statistics or information that is not publicly available. In this scenario a series of contracts between a department (like the fire force) and its members would be created in which the GIS Data would be encrypted and exchanged. The department would be able to selectively revoke a contract and remove the data access when needed. Exchanging Private GIS Data: There are often situations where two or more private entities agree to share their geo data for mutual benefit. In this scenario the data would be encrypted and signed by the transacting parties...","enclosure":[],"categories":["Blockchain","Ethereum","Smart Contract"]},{"title":"Sneak Peak: Our vimrc","pubDate":"2016-11-28 23:40:00","link":"https://lightrains.com/blogs/sneak-peak-into-our-vimrc","guid":"https://lightrains.com/blogs/sneak-peak-into-our-vimrc","author":"","thumbnail":"","description":"This is series of articles explaining our development Environment. This time we will be discussing\nabout vimrc which is a configuration file that we can use to manage our Vim settings.\n\nYou can find the file\nhere.\n\nBasic Vim Settings\n\n\n  set number It enables line number in vim\n  set relativenumber Enables relative numbers in vim. Means Vim will adjust line numbers based on\nyour current cursor position.\n  set linebreak Break lines at word if you have enabled wraplines.\n  set showbreak=+++ Identify breaked lines with +++\n  set textwidth=100 Line wrap (number of cols)\n  set showmatch Highlight matching brace\n  set hlsearch  Highlight all search results\n  set smartcase Enable smart-case search\n  set ignorecase  Always case-insensitive\n  set incsearch Searches for strings incrementally\n  set autoindent  Auto-indent new lines\n  set smartindent Enable smart-indent\n  set smarttab  Enable smart-tabs\n  set softtabstop=4 Number of spaces per Tab\n  autocmd BufRead,BufNewFile *.md setlocal spell Enables spell check for markdown files, ending with extension md\n  set complete+=kspell Enables spelling auto complete.\n\n\nAdvanced Settings\n\n\n  set ruler “ Show row and column ruler information\n  set showtabline=0 “ Show tab bar\n  set undolevels=200  “ Number of undo levels\n  set backspace=indent,eol,start  “ Backspace behaviours\n  filetype plugin on Enables filetype detection along with plugins.\n  set tabstop=2 Set tabstop to tell vim 2 columns a tab counts for\n  set shiftwidth=2 Set number of space characters inserted for indentation\n  set shiftround Round indent to multiple of ‘shiftwidth’.\n  set expandtab spaces to insert a \n  set clipboard=unnamed Use the system clipboard\n  set regexpengine=1 Enables regular expression engine\n  set autoread Watch for file changes outside vim\n  set acd Changes the working directory on each load autochdir\n  let mapleader = \"\\&lt;Space&gt;\" Map leader to Space bar\n  nnoremap &lt;leader&gt;&lt;leader&gt; &lt;C-^&gt; Switch buffers\n\n\nRemember\nYou can view the help text for any commands by running :help COMMAND eg; :help regexpengine","content":"This is series of articles explaining our development Environment. This time we will be discussing\nabout vimrc which is a configuration file that we can use to manage our Vim settings.\n\nYou can find the file\nhere.\n\nBasic Vim Settings\n\n\n  set number It enables line number in vim\n  set relativenumber Enables relative numbers in vim. Means Vim will adjust line numbers based on\nyour current cursor position.\n  set linebreak Break lines at word if you have enabled wraplines.\n  set showbreak=+++ Identify breaked lines with +++\n  set textwidth=100 Line wrap (number of cols)\n  set showmatch Highlight matching brace\n  set hlsearch  Highlight all search results\n  set smartcase Enable smart-case search\n  set ignorecase  Always case-insensitive\n  set incsearch Searches for strings incrementally\n  set autoindent  Auto-indent new lines\n  set smartindent Enable smart-indent\n  set smarttab  Enable smart-tabs\n  set softtabstop=4 Number of spaces per Tab\n  autocmd BufRead,BufNewFile *.md setlocal spell Enables spell check for markdown files, ending with extension md\n  set complete+=kspell Enables spelling auto complete.\n\n\nAdvanced Settings\n\n\n  set ruler “ Show row and column ruler information\n  set showtabline=0 “ Show tab bar\n  set undolevels=200  “ Number of undo levels\n  set backspace=indent,eol,start  “ Backspace behaviours\n  filetype plugin on Enables filetype detection along with plugins.\n  set tabstop=2 Set tabstop to tell vim 2 columns a tab counts for\n  set shiftwidth=2 Set number of space characters inserted for indentation\n  set shiftround Round indent to multiple of ‘shiftwidth’.\n  set expandtab spaces to insert a \n  set clipboard=unnamed Use the system clipboard\n  set regexpengine=1 Enables regular expression engine\n  set autoread Watch for file changes outside vim\n  set acd Changes the working directory on each load autochdir\n  let mapleader = \"\\&lt;Space&gt;\" Map leader to Space bar\n  nnoremap &lt;leader&gt;&lt;leader&gt; &lt;C-^&gt; Switch buffers\n\n\nRemember\nYou can view the help text for any commands by running :help COMMAND eg; :help regexpengine","enclosure":[],"categories":["Development Tools","Vim","vimrc","Sneak Peak"]},{"title":"Liquid Voting","pubDate":"2016-11-11 05:49:48","link":"https://lightrains.com/work/liquid-voting-blockchain-election","guid":"https://lightrains.com/work/liquid-voting-blockchain-election","author":"","thumbnail":"","description":"Liquid Voting is a blockchain based voting/decision making platform made at hack4people Hackathon by team  lightrains. (niksmac, kp666 &amp; sibizulu)\n\nCorruption exist because of concentrating of power. Our solution brings that power to the masses. This is brought by the power of decentralization on top of a tamper proof public blockchain. The voting platform is so powerful that it can pave the path to liquid democracy. The real impact is when we use the platform for day to day decision making in government activities.\n\nThis platform uses Ethereum Private network as the Blockchain platform, and Solidity Smart contracts to record the votes as well as elections. Votes are saved in a tamper proof manner and the candidate can change the vote if the need arises.\n\nInspiration\n\n  “The ballot is stronger than the bullet.”\n-Abraham Lincoln\n\n\nIntentions\n\n\n  Improve Transparency in Voting\n  Reduce security risk\n  Reduce cost of running an election\n  Act as a platform to vote on decisions.\n\n\nOutcome\n\n\n  Built on top of Blockchain\n  Elections are secured by Smart Contracts\n  Cost of infrastructure will be very less (~0.5%)\n\n\nProject\n\n\n  Master\n  Front End (UI)\n  Back end\n  Election Smart Contract\n  Slides","content":"Liquid Voting is a blockchain based voting/decision making platform made at hack4people Hackathon by team  lightrains. (niksmac, kp666 &amp; sibizulu)\n\nCorruption exist because of concentrating of power. Our solution brings that power to the masses. This is brought by the power of decentralization on top of a tamper proof public blockchain. The voting platform is so powerful that it can pave the path to liquid democracy. The real impact is when we use the platform for day to day decision making in government activities.\n\nThis platform uses Ethereum Private network as the Blockchain platform, and Solidity Smart contracts to record the votes as well as elections. Votes are saved in a tamper proof manner and the candidate can change the vote if the need arises.\n\nInspiration\n\n  “The ballot is stronger than the bullet.”\n-Abraham Lincoln\n\n\nIntentions\n\n\n  Improve Transparency in Voting\n  Reduce security risk\n  Reduce cost of running an election\n  Act as a platform to vote on decisions.\n\n\nOutcome\n\n\n  Built on top of Blockchain\n  Elections are secured by Smart Contracts\n  Cost of infrastructure will be very less (~0.5%)\n\n\nProject\n\n\n  Master\n  Front End (UI)\n  Back end\n  Election Smart Contract\n  Slides","enclosure":[],"categories":["Blockchain","Ethereum","Smart Contract"]},{"title":"Rover.IM","pubDate":"2016-11-10 05:49:48","link":"https://lightrains.com/work/rover-im-roverim","guid":"https://lightrains.com/work/rover-im-roverim","author":"","thumbnail":"","description":"Rover.IM is an Instant messaging platform focusing on data security, performance and privacy.\n\nRover.IM is an alternative to WhatsApp where we can keep the sensitive data in-house and keep the information private without compromising performance.\n\nFeatures\n\n  End-to-End encrypted Chat (MTProto)\n  Send/receive documents, photo, audio and video;\n  Conversation archiving\n  Conference rooms aka Group chat\n  Automatic message holding\n  Suitable for Wifi, 3G and Edge\n  Tight data security (StartTLS, SSL and/or VPN)","content":"Rover.IM is an Instant messaging platform focusing on data security, performance and privacy.\n\nRover.IM is an alternative to WhatsApp where we can keep the sensitive data in-house and keep the information private without compromising performance.\n\nFeatures\n\n  End-to-End encrypted Chat (MTProto)\n  Send/receive documents, photo, audio and video;\n  Conversation archiving\n  Conference rooms aka Group chat\n  Automatic message holding\n  Suitable for Wifi, 3G and Edge\n  Tight data security (StartTLS, SSL and/or VPN)","enclosure":[],"categories":["Android"]},{"title":"How to set up elm development environment","pubDate":"2016-10-13 23:40:00","link":"https://lightrains.com/blogs/setup-elm-development-environment","guid":"https://lightrains.com/blogs/setup-elm-development-environment","author":"","thumbnail":"","description":"Elm is a language that compiles to JavaScript, or in other words, Elm is a language to generate functional JavaScript code.\n\n\n  This guide is talking about installing and setting up elm version 0.17.1\n\n\nWhy we need Elm?\nElm is a programming language for declaratively creating web browser-based graphical user interfaces. Elm is purely functional, and is developed with emphasis on usability, performance, and robustness. It advertises “no runtime exceptions in practice”, made possible by the Elm compiler’s static type checking.\n\nUpdate 22, Oct 2016.\n\n  I came across Elm For Beginners amazing set of tutorials by James Moore, i would recommend watching it. Also his note on Development Environment Setup Steps\n\n\nFeatures of Elm\n\n\n  JavaScript Interop\n  No Runtime Exceptions\n  Great Performance\n  Enforced Semantic Versioning\n\n\nRead details.\n\n1. Installing Elm Platform.\n\nYou can download the latest package from here.\n\nOR\n\n\n  Mac Installer\n  Windows Installer\n  Anywhere npm or build from source\n\n\nConfigure Your Editor\n\nBefore you start you can play around with the online editor to get familiarized with the language.\n\n\n  Atom\n  Emacs\n  Sublime Text\n  Vim\n\n\nWhy should you consider using Elm?\n\nElm offers many benefits over JavaScript, which you’ll see in this course.\nBenefits such as:\n\n  Zero Runtime Exceptions\n  Simplified Debugging\n  Easy Refactoring\n  Helpful Type System &amp; Compiler\n  Improved Productivity\n  Inherently testable code\n  Enforced Semantic Versioning\n\n\nSource\n\n\n  guide.elm-lang.org\n  elmcast.io\n  elm-lang.org","content":"Elm is a language that compiles to JavaScript, or in other words, Elm is a language to generate functional JavaScript code.\n\n\n  This guide is talking about installing and setting up elm version 0.17.1\n\n\nWhy we need Elm?\nElm is a programming language for declaratively creating web browser-based graphical user interfaces. Elm is purely functional, and is developed with emphasis on usability, performance, and robustness. It advertises “no runtime exceptions in practice”, made possible by the Elm compiler’s static type checking.\n\nUpdate 22, Oct 2016.\n\n  I came across Elm For Beginners amazing set of tutorials by James Moore, i would recommend watching it. Also his note on Development Environment Setup Steps\n\n\nFeatures of Elm\n\n\n  JavaScript Interop\n  No Runtime Exceptions\n  Great Performance\n  Enforced Semantic Versioning\n\n\nRead details.\n\n1. Installing Elm Platform.\n\nYou can download the latest package from here.\n\nOR\n\n\n  Mac Installer\n  Windows Installer\n  Anywhere npm or build from source\n\n\nConfigure Your Editor\n\nBefore you start you can play around with the online editor to get familiarized with the language.\n\n\n  Atom\n  Emacs\n  Sublime Text\n  Vim\n\n\nWhy should you consider using Elm?\n\nElm offers many benefits over JavaScript, which you’ll see in this course.\nBenefits such as:\n\n  Zero Runtime Exceptions\n  Simplified Debugging\n  Easy Refactoring\n  Helpful Type System &amp; Compiler\n  Improved Productivity\n  Inherently testable code\n  Enforced Semantic Versioning\n\n\nSource\n\n\n  guide.elm-lang.org\n  elmcast.io\n  elm-lang.org","enclosure":[],"categories":["Elm","Elm-lang","Development Tools","Functional JavaScript","Functional Programming"]},{"title":"What does each genesis.json parameter mean?","pubDate":"2016-10-12 23:40:00","link":"https://lightrains.com/blogs/genesis-json-parameter-explained-ethereum","guid":"https://lightrains.com/blogs/genesis-json-parameter-explained-ethereum","author":"","thumbnail":"","description":"The Genesis block is the start block of the Blockchain - the first block, block 0, the only block that does not point to a predecessor block. Parameters of genesis.json nonce timestamp mixhash difficulty alloc parentHash extraData gasLimit coinbase Parameters and Explanation nonce A 64-bit hash, which proves, combined with the mix-hash, that a sufficient amount of computation has been carried out on this block: the Proof-of-Work (PoW). The combination of nonce and mixhash must satisfy a mathematical condition described in the Yellowpaper, 4.3.4. Block Header Validity, (44), and allows to verify that the Block has really been cryptographically mined and thus, from this aspect, is valid. The nonce is the cryptographically secure mining proof-of-work that proves beyond reasonable doubt that a particular amount of computation has been expended in the determination of this token value. (Yellowpager, 11.5. Mining Proof-of-Work). timestamp A scalar value equal to the reasonable output of Unix time() function at this block inception. This mechanism enforces a homeostasis in terms of the time between blocks. A smaller period between the last two blocks results in an increase in the difficulty level and thus additional computation required to find the next valid block. If the period is too large, the difficulty, and expected time to the next block, is reduced. The timestamp also allows verifying the order of block within the chain (Yellowpaper, 4.3.4. (43)). mixhash A 256-bit hash which proves, combined with the nonce, that a sufficient amount of computation has been carried out on this block: the Proof-of-Work (PoW). The combination of nonce and mixhash must satisfy a mathematical condition described in the Yellowpaper, 4.3.4. Block Header Validity, (44). It allows to verify that the Block has really been cryptographically mined, thus, from this aspect, is valid. difficulty A scalar value corresponding to the difficulty...","content":"The Genesis block is the start block of the Blockchain - the first block, block 0, the only block that does not point to a predecessor block. Parameters of genesis.json nonce timestamp mixhash difficulty alloc parentHash extraData gasLimit coinbase Parameters and Explanation nonce A 64-bit hash, which proves, combined with the mix-hash, that a sufficient amount of computation has been carried out on this block: the Proof-of-Work (PoW). The combination of nonce and mixhash must satisfy a mathematical condition described in the Yellowpaper, 4.3.4. Block Header Validity, (44), and allows to verify that the Block has really been cryptographically mined and thus, from this aspect, is valid. The nonce is the cryptographically secure mining proof-of-work that proves beyond reasonable doubt that a particular amount of computation has been expended in the determination of this token value. (Yellowpager, 11.5. Mining Proof-of-Work). timestamp A scalar value equal to the reasonable output of Unix time() function at this block inception. This mechanism enforces a homeostasis in terms of the time between blocks. A smaller period between the last two blocks results in an increase in the difficulty level and thus additional computation required to find the next valid block. If the period is too large, the difficulty, and expected time to the next block, is reduced. The timestamp also allows verifying the order of block within the chain (Yellowpaper, 4.3.4. (43)). mixhash A 256-bit hash which proves, combined with the nonce, that a sufficient amount of computation has been carried out on this block: the Proof-of-Work (PoW). The combination of nonce and mixhash must satisfy a mathematical condition described in the Yellowpaper, 4.3.4. Block Header Validity, (44). It allows to verify that the Block has really been cryptographically mined, thus, from this aspect, is valid. difficulty A scalar value corresponding to the difficulty...","enclosure":[],"categories":["Ethereum","Mining","Difficulty","DAG","Principles","Blockchain","Genesis Block"]},{"title":"Noteworthy projects based on Blockchain Technology","pubDate":"2016-09-27 23:40:00","link":"https://lightrains.com/blogs/noteworthy-blockchain-projects","guid":"https://lightrains.com/blogs/noteworthy-blockchain-projects","author":"","thumbnail":"","description":"Decentralized network existed before blockchain. But the key innovation of blockchain is its ability to hold the economic value, as pioneered as Bitcoin network. Currently, the blockchain is used in broad range of decentralized applications in many areas, including commerce, social media, content sharing, internet services, logistics and even government. Here are some Blockchain and Ethereum based projects. Git Money (Bitcoin) Git Money allows anyone to earn money by solving open issues on GitHub. Repository owners put up bounties for tasks and the reward is automatically paid to whoever submits the first successfully merged pull request. How it works Git opportunities: Every day people and companies are paying to get quick assistance with small tasks, find one suitable for you. Git work: An email a day will give you the list of work so that you can choose your work to get paid Get paid: Complete a task, provide your bitcoin address and get paid instantly. Augur (Ethereum) Augur is a prediction market platform that rewards for correctly predicting the future real-world events. Make the predictions by trading virtual shares in the outcome of events happening in the real world, buy shares in those outcomes. If the shares are in correct outcome you’ll win real money as profit. Features No central servers Create your own market Low fees Crowdsourced reporting Safe, automated payments TransActive Grid (Ethereum) TransActive Grid allows neighbors to purchase and sell renewable energy among each other, offering communities with microgrids a way to create a local energy market while reducing emissions and pollution. How it works Distributed Energy Resources: Brooklyn Microgrid is a distributed energy development group in the Park Slope and Gowanus communities of Brooklyn, New York creating a connected network for local energy. TransActive Grid: TransActive Grid is combination of ​software ​and hardware ​that enables...","content":"Decentralized network existed before blockchain. But the key innovation of blockchain is its ability to hold the economic value, as pioneered as Bitcoin network. Currently, the blockchain is used in broad range of decentralized applications in many areas, including commerce, social media, content sharing, internet services, logistics and even government. Here are some Blockchain and Ethereum based projects. Git Money (Bitcoin) Git Money allows anyone to earn money by solving open issues on GitHub. Repository owners put up bounties for tasks and the reward is automatically paid to whoever submits the first successfully merged pull request. How it works Git opportunities: Every day people and companies are paying to get quick assistance with small tasks, find one suitable for you. Git work: An email a day will give you the list of work so that you can choose your work to get paid Get paid: Complete a task, provide your bitcoin address and get paid instantly. Augur (Ethereum) Augur is a prediction market platform that rewards for correctly predicting the future real-world events. Make the predictions by trading virtual shares in the outcome of events happening in the real world, buy shares in those outcomes. If the shares are in correct outcome you’ll win real money as profit. Features No central servers Create your own market Low fees Crowdsourced reporting Safe, automated payments TransActive Grid (Ethereum) TransActive Grid allows neighbors to purchase and sell renewable energy among each other, offering communities with microgrids a way to create a local energy market while reducing emissions and pollution. How it works Distributed Energy Resources: Brooklyn Microgrid is a distributed energy development group in the Park Slope and Gowanus communities of Brooklyn, New York creating a connected network for local energy. TransActive Grid: TransActive Grid is combination of ​software ​and hardware ​that enables...","enclosure":[],"categories":["Blockchain","Blockchain Projects"]},{"title":"Open source Blockchain platforms","pubDate":"2016-09-21 23:40:00","link":"https://lightrains.com/blogs/opensource-blockchain-platforms","guid":"https://lightrains.com/blogs/opensource-blockchain-platforms","author":"","thumbnail":"","description":"Open source software is revolutionizing technology by enabling companies to speed development, reduce costs, increase innovation, and improve efficiency. Never before has any open source project generated as much attention on the international stage as Bitcoin. But now a days the world is looking into open source Blockchain platforms. Here are some open source Blockchain platforms. 1. Eris erisindustries.com A software that allows anyone to create their own secure, low-cost and run anywhere application using Blockchain and smart contract technology. Communities, government and anybody else can use smart contracts to automate their business with Eris. Eris is free software that allows anyone to build their own secure, low-cost, run-anywhere applications using blockchain and smart contract technology. Features Services: Things that you turn on and off Chains: Develop permissioned chains Contracts: There is a smart contract tool chain in Eris Actions: Every action is step by step. 2. HydraChain hydrachain.com HydraChain is an extension of the Ethereum platform which adds support for creating Permissioned Distributed Ledgers. Its primary domain of application are private chain or consortium chain setups especially in the financial industry. Features Full compatibility to the Ethereum Protocol Accountable Validators Instant finality Native Contracts Customizability Easy Deployment Open source Commercial support 3. MultiChain multichain.com Allows organizations to rapidly design, deploy and operate Distributed ledgers Features Managed Permission Rapid deployment Native asset support Customizable Bitcoin compatible Extendable 4. OpenChain openchain.org Openchain is an open source distributed ledger technology. It is suited for organizations wishing to issue and manage digital assets in a robust, secure and scalable way. Anyone can spin up a new Openchain instance within seconds. The administrator of an Openchain instance defines the rules of the ledger. End-users can exchange value on the ledger according to those rules. Every transaction on the ledger is digitally signed, like with...","content":"Open source software is revolutionizing technology by enabling companies to speed development, reduce costs, increase innovation, and improve efficiency. Never before has any open source project generated as much attention on the international stage as Bitcoin. But now a days the world is looking into open source Blockchain platforms. Here are some open source Blockchain platforms. 1. Eris erisindustries.com A software that allows anyone to create their own secure, low-cost and run anywhere application using Blockchain and smart contract technology. Communities, government and anybody else can use smart contracts to automate their business with Eris. Eris is free software that allows anyone to build their own secure, low-cost, run-anywhere applications using blockchain and smart contract technology. Features Services: Things that you turn on and off Chains: Develop permissioned chains Contracts: There is a smart contract tool chain in Eris Actions: Every action is step by step. 2. HydraChain hydrachain.com HydraChain is an extension of the Ethereum platform which adds support for creating Permissioned Distributed Ledgers. Its primary domain of application are private chain or consortium chain setups especially in the financial industry. Features Full compatibility to the Ethereum Protocol Accountable Validators Instant finality Native Contracts Customizability Easy Deployment Open source Commercial support 3. MultiChain multichain.com Allows organizations to rapidly design, deploy and operate Distributed ledgers Features Managed Permission Rapid deployment Native asset support Customizable Bitcoin compatible Extendable 4. OpenChain openchain.org Openchain is an open source distributed ledger technology. It is suited for organizations wishing to issue and manage digital assets in a robust, secure and scalable way. Anyone can spin up a new Openchain instance within seconds. The administrator of an Openchain instance defines the rules of the ledger. End-users can exchange value on the ledger according to those rules. Every transaction on the ledger is digitally signed, like with...","enclosure":[],"categories":["Blockchain","Platforms","Development Tools","Open Source"]},{"title":"Functional Programming in JavaScript","pubDate":"2016-09-20 23:40:00","link":"https://lightrains.com/blogs/functional-javascript-es6-introduction","guid":"https://lightrains.com/blogs/functional-javascript-es6-introduction","author":"","thumbnail":"","description":"In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. wiki If you’re looking for a quick start in Functional Programming, JavaScript is the perfect language for you. Here’s why: Almost all programmers have tweaked and / or written JavaScript code at some point of time — hence there should be a certain familiarity JavaScript comes as close to a standardized programming language we’ll get — it’s the only programming language available across all web browsers JavaScript comes with a very familiar C like syntax and should be readable to most programmers Functions have always been first class members in JavaScript, support for Functional Programming is very good and in many ways JavaScript has been ahead of its time JavaScript doesn’t have Java like Class based Object Oriented Programming support so in many ways you’re forced to be Functional in JavaScript Main fancy words you will hear Pure functions Higher-order functions Recursion Functor Compose Destructuring Currying Pure functions Returns the same result given same parameters. It’s execution doesn’t depend on the state of the system. 1) Impure let number = 1; const increment = () =&gt; number += 1; increment(); // 2 2) Pure const increment = n =&gt; n + 1; increment(1); // 2 Higher-order functions Functions that operate on other functions, either by taking them as arguments or by returning them. 1) Sum const sum = (x, y) =&gt; x + y; const calculate = (fn, x, y) =&gt; fn(x, y); calculate(sum, 1, 2); // 3 2) Filter let students = [ {name: 'Anna', grade: 6}, {name:...","content":"In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. wiki If you’re looking for a quick start in Functional Programming, JavaScript is the perfect language for you. Here’s why: Almost all programmers have tweaked and / or written JavaScript code at some point of time — hence there should be a certain familiarity JavaScript comes as close to a standardized programming language we’ll get — it’s the only programming language available across all web browsers JavaScript comes with a very familiar C like syntax and should be readable to most programmers Functions have always been first class members in JavaScript, support for Functional Programming is very good and in many ways JavaScript has been ahead of its time JavaScript doesn’t have Java like Class based Object Oriented Programming support so in many ways you’re forced to be Functional in JavaScript Main fancy words you will hear Pure functions Higher-order functions Recursion Functor Compose Destructuring Currying Pure functions Returns the same result given same parameters. It’s execution doesn’t depend on the state of the system. 1) Impure let number = 1; const increment = () =&gt; number += 1; increment(); // 2 2) Pure const increment = n =&gt; n + 1; increment(1); // 2 Higher-order functions Functions that operate on other functions, either by taking them as arguments or by returning them. 1) Sum const sum = (x, y) =&gt; x + y; const calculate = (fn, x, y) =&gt; fn(x, y); calculate(sum, 1, 2); // 3 2) Filter let students = [ {name: 'Anna', grade: 6}, {name:...","enclosure":[],"categories":["Functional JavaScript","ES6","JavaScript","Functional Programming"]},{"title":"Introduction to Tmux","pubDate":"2016-09-02 23:40:00","link":"https://lightrains.com/blogs/tmux-tips","guid":"https://lightrains.com/blogs/tmux-tips","author":"","thumbnail":"","description":"tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen. Install tmux. tmux depends on libevent 2.x. Download it from: libevent.org From source By default, tmux will use the utempter library to update utmp(5), if it is installed. Run configure with --disable-utempter to disable this. To build tmux from a release tarball, do: $ ./configure &amp;&amp; make $ sudo make install To get and build the latest from version control: $ git clone https://github.com/tmux/tmux.git $ cd tmux $ sh autogen.sh $ ./configure &amp;&amp; make Install tmux in Mac OSX Yes, you can do brew install tmux Starting Tmux You can start a tmux session by tmux attach or simply tmux a command. Managing the configuration. You can manage all the configurations with .tmux.conf file. Which will reside in your home folder. You can check with cat ~/.tmux.conf to see whether there is any. Multiple Pane Synchronization What setw synchronise-panes gives us is that it simultaneously sends keyboard input from one pane to the rest of the panes. (In this case, we can also see the the Elixir REPL is far superior because of the colored output.) Obviously, this demonstration is a mere party trick to impress developers and nothing more. A good use case is having to perform a repetitive operation on multiple machines. For example, imagine having a tmux session connected to four remote hosts and having to executer the exact same command on all of them. Noteworthy plugins. 1. Tmux Plugin Manager Installs and loads TMUX plugins. 2. tmux-resurrect Restore tmux environment after system restart. Tmux is great, except when you have to restart the computer. You lose all the...","content":"tmux is a “terminal multiplexer”, it enables a number of terminals (or windows) to be accessed and controlled from a single terminal. tmux is intended to be a simple, modern, BSD-licensed alternative to programs such as GNU screen. Install tmux. tmux depends on libevent 2.x. Download it from: libevent.org From source By default, tmux will use the utempter library to update utmp(5), if it is installed. Run configure with --disable-utempter to disable this. To build tmux from a release tarball, do: $ ./configure &amp;&amp; make $ sudo make install To get and build the latest from version control: $ git clone https://github.com/tmux/tmux.git $ cd tmux $ sh autogen.sh $ ./configure &amp;&amp; make Install tmux in Mac OSX Yes, you can do brew install tmux Starting Tmux You can start a tmux session by tmux attach or simply tmux a command. Managing the configuration. You can manage all the configurations with .tmux.conf file. Which will reside in your home folder. You can check with cat ~/.tmux.conf to see whether there is any. Multiple Pane Synchronization What setw synchronise-panes gives us is that it simultaneously sends keyboard input from one pane to the rest of the panes. (In this case, we can also see the the Elixir REPL is far superior because of the colored output.) Obviously, this demonstration is a mere party trick to impress developers and nothing more. A good use case is having to perform a repetitive operation on multiple machines. For example, imagine having a tmux session connected to four remote hosts and having to executer the exact same command on all of them. Noteworthy plugins. 1. Tmux Plugin Manager Installs and loads TMUX plugins. 2. tmux-resurrect Restore tmux environment after system restart. Tmux is great, except when you have to restart the computer. You lose all the...","enclosure":[],"categories":["Development Tools","Tmux","Tools"]},{"title":"What is Private Permissioned Blockchain","pubDate":"2016-08-11 23:40:00","link":"https://lightrains.com/blogs/what-private-permissioned-blockchain","guid":"https://lightrains.com/blogs/what-private-permissioned-blockchain","author":"","thumbnail":"","description":"Properly permissioned blockchain networks differ from unpermissioned blockchain networks solely based on the presence (or absence) of an access control layer built into the blockchain clients.\n\nThe first primary difference between a properly conceived permissioned blockchain network and an unpermissioned blockchain network is whether the participants in the network have an ability to restrict who can participate in the consensus mechanism of the blockchain’s network.\n\nPermissioned blockchain networks allow the network to appoint a group of participants in the network who are given the express authority to provide the validation of blocks of transactions. Or, to participate in the consensus mechanism.\n\nWhy do we need Permissioned Blockchain\n\nTo understand the benefits of permissioned blockchain networks to their participants, we must consider the relative advantages which they have vis a vis their unpermissioned cousins.\n\nWe must also consider the relative advantages which permissioned blockchain networks have vis a vis their cousins on the other side of the spectrum: hub and spoke distributed databases.\n\n\n  Governance Over A Permissioned Blockchain is Clearly Defined\n  More Cost Effective\n  Extra layer of security is there. (could be)\n\n\nSources\n\n  https://docs.erisindustries.com\n\n\n\n  \n    \n    Talk to one of our  blockchain consultant.\n  \n\n  \n hexlxlo@xligxhtrxaxixnxs.com","content":"Properly permissioned blockchain networks differ from unpermissioned blockchain networks solely based on the presence (or absence) of an access control layer built into the blockchain clients.\n\nThe first primary difference between a properly conceived permissioned blockchain network and an unpermissioned blockchain network is whether the participants in the network have an ability to restrict who can participate in the consensus mechanism of the blockchain’s network.\n\nPermissioned blockchain networks allow the network to appoint a group of participants in the network who are given the express authority to provide the validation of blocks of transactions. Or, to participate in the consensus mechanism.\n\nWhy do we need Permissioned Blockchain\n\nTo understand the benefits of permissioned blockchain networks to their participants, we must consider the relative advantages which they have vis a vis their unpermissioned cousins.\n\nWe must also consider the relative advantages which permissioned blockchain networks have vis a vis their cousins on the other side of the spectrum: hub and spoke distributed databases.\n\n\n  Governance Over A Permissioned Blockchain is Clearly Defined\n  More Cost Effective\n  Extra layer of security is there. (could be)\n\n\nSources\n\n  https://docs.erisindustries.com\n\n\n\n  \n    \n    Talk to one of our  blockchain consultant.\n  \n\n  \n hexlxlo@xligxhtrxaxixnxs.com","enclosure":[],"categories":["Blockchain","Private Blockchain","Permissioned Blockchain"]},{"title":"Blockchain for Insurance Industry","pubDate":"2016-08-11 23:40:00","link":"https://lightrains.com/blogs/blockchain-for-insurance-industry","guid":"https://lightrains.com/blogs/blockchain-for-insurance-industry","author":"","thumbnail":"","description":"Insurance companies have been traditionally slow to drive adoption in technologies. These innovation strategies and initiatives are aimed at retaining customers and optimizing pricing and tradability of services. Insurers who have trust at the heart have begun to appreciate with technologies such as blockchain because they believe that a “trustless” system (which pushes identity management, ownership and management of data and processes to the customer) may provide genuine long-term strategic benefits. Whats is meant by trust-less: The greatest advantage of blockchains is its decentralized protocol which is often referred as “Trust to the trust-less world”. Because every part of the system is continually checking and approving the work of the others. Therefore, if any piece of information will be changed on one machine, it won’t be approved by the others as all of them hold the same record. In the banking industry, several blockchain use conditions are being integrated, which range from customer-facing repayment technology to switch and trading services.While the insurance industry (in conditions of technology adoption) lags behind banking, it is nevertheless uniquely positioned to reap the benefits of blockchain technology. Blockchain can address the competitive challenges many incumbents face, including poor customer engagement, limited growth in mature markets, and the trends of digitization. In the next, we format the most appealing insurance-related use circumstances in three categories: enabling progress, increasing efficiency, and lowering cost by automating key techniques. Potential use cases Validate authenticity, ownership, and provenance of goods as well as authenticity of documents (e.g., medical reports) Check for police theft reports/claims history as well as a person’s verified identity and detect patterns of fraudulent behavior related to a specific identity Prove date and time of policy issuance or purchase of a product/asset Confirm subsequent ownership and location changes. How CAN we keep the files on the...","content":"Insurance companies have been traditionally slow to drive adoption in technologies. These innovation strategies and initiatives are aimed at retaining customers and optimizing pricing and tradability of services. Insurers who have trust at the heart have begun to appreciate with technologies such as blockchain because they believe that a “trustless” system (which pushes identity management, ownership and management of data and processes to the customer) may provide genuine long-term strategic benefits. Whats is meant by trust-less: The greatest advantage of blockchains is its decentralized protocol which is often referred as “Trust to the trust-less world”. Because every part of the system is continually checking and approving the work of the others. Therefore, if any piece of information will be changed on one machine, it won’t be approved by the others as all of them hold the same record. In the banking industry, several blockchain use conditions are being integrated, which range from customer-facing repayment technology to switch and trading services.While the insurance industry (in conditions of technology adoption) lags behind banking, it is nevertheless uniquely positioned to reap the benefits of blockchain technology. Blockchain can address the competitive challenges many incumbents face, including poor customer engagement, limited growth in mature markets, and the trends of digitization. In the next, we format the most appealing insurance-related use circumstances in three categories: enabling progress, increasing efficiency, and lowering cost by automating key techniques. Potential use cases Validate authenticity, ownership, and provenance of goods as well as authenticity of documents (e.g., medical reports) Check for police theft reports/claims history as well as a person’s verified identity and detect patterns of fraudulent behavior related to a specific identity Prove date and time of policy issuance or purchase of a product/asset Confirm subsequent ownership and location changes. How CAN we keep the files on the...","enclosure":[],"categories":["Blockchain","Whitepaper"]},{"title":"What Is Bitcoin and how is it useful","pubDate":"2016-08-08 23:40:00","link":"https://lightrains.com/blogs/bitcoin-how-is-useful","guid":"https://lightrains.com/blogs/bitcoin-how-is-useful","author":"","thumbnail":"","description":"Bitcoin is a decentralized digital currency, created and held electronically. No one controls it. They’re not printed, produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems.\n\nSatoshi Nakamoto, a software developer proposed bitcoin, which was an electronic payment system based on mathematical proof. Idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees.\n\nCharacteristics of Bitcoin\n\n\n  Decentralized\n  Easy to set up\n  Anonymous\n  Transparent\n  Minimal Transaction fee\n  Fast transaction\n  Non-repudiable\n\n\nHow does one acquire bitcoins?\n\n\n  As payment for goods or services.\n  Purchase bitcoins at a Bitcoin exchange.\n  Exchange bitcoins from anyone.\n  Earn bitcoins through mining.\n\n\nAdvantage/Disadvantage of Bitcoin\n\nAdvantages:\n\n\n  Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time\n  Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how large a fee to pay when spending.\n  Risk Free:- Bitcoin transactions are secure, irreversible, and do not contain customers’ sensitive or personal information.\n  Highly secured:- Bitcoin payments can be made without personal information tied to the transaction thus offers strong protection against identity theft.\n  Neutral and Transparent:- All information about the Bitcoin money supply is available on the block chain and anybody can verify and use in real-time.\n\n\nDisadvantages:\n\n\n  Degree Of Acceptance:- Many people are still unaware of Bitcoin.\n  Volatility:- The price of the Bitcoin is volatile, it varies as per time.\n  Ongoing Development:- Bitcoin is still in the process of maturing.","content":"Bitcoin is a decentralized digital currency, created and held electronically. No one controls it. They’re not printed, produced by people, and increasingly businesses, running computers all around the world, using software that solves mathematical problems.\n\nSatoshi Nakamoto, a software developer proposed bitcoin, which was an electronic payment system based on mathematical proof. Idea was to produce a currency independent of any central authority, transferable electronically, more or less instantly, with very low transaction fees.\n\nCharacteristics of Bitcoin\n\n\n  Decentralized\n  Easy to set up\n  Anonymous\n  Transparent\n  Minimal Transaction fee\n  Fast transaction\n  Non-repudiable\n\n\nHow does one acquire bitcoins?\n\n\n  As payment for goods or services.\n  Purchase bitcoins at a Bitcoin exchange.\n  Exchange bitcoins from anyone.\n  Earn bitcoins through mining.\n\n\nAdvantage/Disadvantage of Bitcoin\n\nAdvantages:\n\n\n  Payment Freedom:- It is possible to send and receive bitcoins anywhere in the world at any time\n  Less transaction Fees:- No fee to receive bitcoins. You can choose your transaction fee and many wallets let you control how large a fee to pay when spending.\n  Risk Free:- Bitcoin transactions are secure, irreversible, and do not contain customers’ sensitive or personal information.\n  Highly secured:- Bitcoin payments can be made without personal information tied to the transaction thus offers strong protection against identity theft.\n  Neutral and Transparent:- All information about the Bitcoin money supply is available on the block chain and anybody can verify and use in real-time.\n\n\nDisadvantages:\n\n\n  Degree Of Acceptance:- Many people are still unaware of Bitcoin.\n  Volatility:- The price of the Bitcoin is volatile, it varies as per time.\n  Ongoing Development:- Bitcoin is still in the process of maturing.","enclosure":[],"categories":["Bitcoin","Cryptocurrency"]}]}
